name: CI/CD - Python Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-build-test-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # ========== ETAPA 1: BUILD ==========
    - name: Checkout del código
      uses: actions/checkout@v4
      
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Instalar dependencias (BUILD)
      run: |
        pip install -r requirements.txt
        echo "✅ Dependencias de Python instaladas"
    
    # ========== ETAPA 2: TEST ==========
    - name: Ejecutar pruebas con pytest (TEST)
      run: |
        python -m pytest test_basic.py -v
        echo "✅ Pruebas de Python ejecutadas exitosamente"
    
    - name: Verificar sintaxis del código
      run: |
        python -m py_compile app.py
        echo "✅ Sintaxis de Python verificada"
    
    # ========== ETAPA 3: DEPLOY CON DOCKER ==========
    - name: Construir imagen Docker para Python
      run: |
        echo "🐳 Construyendo imagen Docker para Python..."
        docker build -t python-app:latest .
        echo "✅ Imagen Docker de Python construida"
    
    - name: Probar aplicación Python en contenedor
      run: |
        echo "🚀 Ejecutando contenedor Python..."
        docker run -d --name python-test -p 5000:5000 python-app:latest
        sleep 5
        echo "🔍 Health check..."
        curl -f http://localhost:5000/health && echo "✅ App Python funciona en Docker"
        docker stop python-test
        docker rm python-test
    
    - name: Simular despliegue en producción
      run: |
        echo "🎉 ¡DESPLIEGUE DE APLICACIÓN PYTHON EXITOSO!"
        echo "✅ Build: Dependencias instaladas"
        echo "✅ Test: Pruebas pytest exitosas"
        echo "✅ Deploy: Contenedor Docker funcionando"
        echo "🚀 Aplicación Python lista para producción"