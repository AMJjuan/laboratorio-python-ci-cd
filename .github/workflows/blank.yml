name: CI/CD - Python Calculadora
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  python-calculadora-ci:
    runs-on: ubuntu-latest

    steps:
    # ========== ETAPA 1: SETUP ==========
    - name: Checkout del cÃ³digo
      uses: actions/checkout@v4

    - name: Configurar Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

# ========== ETAPA 2: BUILD & TEST ==========
    - name: Instalar dependencias
      run: |
        pip install -r requirements.txt
        echo "âœ… Dependencias instaladas"

    - name: Ejecutar linter (Flake8)
      run: |
        python -m flake8 src/ --max-line-length=100
        echo "âœ… AnÃ¡lisis de cÃ³digo completado"

    - name: Ejecutar pruebas unitarias
      run: |
        python -m pytest tests/test_calculadora.py -v --cov=src --cov-report=xml
        echo "âœ… Pruebas unitarias ejecutadas"

    - name: Subir reporte de cobertura
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    # ========== ETAPA 3: DOCKER & DEPLOY ==========
    - name: Construir imagen Docker de la calculadora
      run: |
        docker build -t python-calculadora:latest .
        echo "âœ… Imagen Docker construida"

    - name: Ejecutar pruebas en contenedor
      run: |
        docker run --rm python-calculadora:latest
        echo "âœ… Pruebas ejecutadas en contenedor"

    - name: Simular despliegue
      run: |
        echo "ðŸš€ SIMULANDO DESPLIEGUE DE CALCULADORA PYTHON"
        echo "âœ… Build: Completado"
        echo "âœ… Tests: 5 pruebas pasadas"
        echo "âœ… Docker: Imagen construida y probada"
        echo "ðŸŽ‰ AplicaciÃ³n Python lista para producciÃ³n"
